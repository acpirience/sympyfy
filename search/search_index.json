{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pre-requisite","title":"Pre-requisite","text":"<p>A pre-requisite for using this library is to get a Spotify access token: https://developer.spotify.com/documentation/web-api/tutorials/getting-started#request-an-access-token.</p> <p>Sympyfy needs either:  </p> <ul> <li>The client_id and client_secret passed as parameters of the <code>load_credentials()</code> method.</li> <li>The client_id and client_secret environment variables present.</li> <li>a .env file creating those variables</li> </ul> <p>Exemple: <pre><code>client_id=\"MY_CLIENT_ID\"\nclient_secret=\"MY_CLIENT_SECRET\"\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>USAGE<pre><code>from sympyfy import Sympyfy\nfrom rich.console import Console\n\nconsole = Console()\n\nspotify = Sympyfy()\nspotify.load_credentials()\n\nartist = spotify.get_artist(\"1GhPHrq36VKCY3ucVaZCfo\")\n\nconsole.print(artist)\n</code></pre> <pre><code>Artist(\n    id='1GhPHrq36VKCY3ucVaZCfo',\n    name='The Chemical Brothers',\n    href='https://api.spotify.com/v1/artists/1GhPHrq36VKCY3ucVaZCfo',\n    uri='spotify:artist:1GhPHrq36VKCY3ucVaZCfo',\n    popularity=61,\n    type='artist',\n    followers=Followers(href=None, total=2013511),\n    genres=[\n        'alternative dance',\n        'big beat',\n        'breakbeat',\n        'electronica',\n        'rave',\n        'trip hop'\n    ],\n    external_urls={\n        'spotify': 'https://open.spotify.com/artist/1GhPHrq36VKCY3ucVaZCfo'\n    },\n    images=[\n        Image(\n            url='https://i.scdn.co/image/ab6761610000e5ebae05213e52565bfd7e7489\nb3',\n            height=640,\n            width=640\n        ),\n        Image(\n            url='https://i.scdn.co/image/ab67616100005174ae05213e52565bfd7e7489\nb3',\n            height=320,\n            width=320\n        ),\n        Image(\n            url='https://i.scdn.co/image/ab6761610000f178ae05213e52565bfd7e7489\nb3',\n            height=160,\n            width=160\n        )\n    ]\n)\n</code></pre></p>"},{"location":"0sympyfy/","title":"Sympyfy API","text":""},{"location":"0sympyfy/#credentials","title":"CREDENTIALS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.load_credentials","title":"<code>load_credentials(auth_type=Auth_type.APP, client_id='', client_secret='', scope=None)</code>","text":"<p>Load Spotify credential request for an Access Token. If parameters are provided, they will be used; else environment variables will be used, else we will try in the .env file See: https://developer.spotify.com/documentation/web-api/concepts/access-token</p> <p>Parameters:</p> Name Type Description Default <code>auth_type</code> <code>Auth_type</code> <p>Authentication type: APP (client_id/secret) or USER (Oauth2 via Authorization code flow)</p> <code>APP</code> <code>client_id</code> <code>str</code> <p>Client Id of the application, provided by Spotify.</p> <code>''</code> <code>client_secret</code> <code>str</code> <p>Client secret of the application, provided by Spotify.</p> <code>''</code> <code>scope</code> <code>list[str] | None</code> <p>the rights asked given to the app when a USER connection is used. Must be a valid list af scopes. See https://developer.spotify.com/documentation/web-api/concepts/scopes</p> <code>None</code>"},{"location":"0sympyfy/#artists","title":"ARTISTS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_artist","title":"<code>get_artist(artist_id)</code>","text":"<p>returns an Artist Object specified by its id See: https://developer.spotify.com/documentation/web-api/reference/get-an-artist</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>Spotify id of the artist</p> required <p>Returns:</p> Type Description <code>Artist | None</code> <p>Artist object or None if id does not match an artist</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_several_artists","title":"<code>get_several_artists(artist_ids)</code>","text":"<p>returns a list of Artist Objects specified by a list of their ids https://developer.spotify.com/documentation/web-api/reference/get-multiple-artists</p> <p>Parameters:</p> Name Type Description Default <code>artist_ids</code> <code>list[str]</code> <p>list of artists ids</p> required <p>Returns:</p> Type Description <code>list[Artist]</code> <p>list of Artist objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_artist_albums","title":"<code>get_artist_albums(artist_id, market=None, include_groups=INCLUDE_GROUPS, limit=20, offset=0)</code>","text":"<p>Get Spotify catalog information about an artist's albums. https://developer.spotify.com/documentation/web-api/reference/get-an-artists-albums</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>The Spotify ID of the artist.</p> required <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.</p> <code>None</code> <code>include_groups</code> <code>list[str]</code> <p>A list of keywords that will be used to filter the response. Valid values are: album, single, appears_on, compilation.</p> <code>INCLUDE_GROUPS</code> <code>limit</code> <code>int</code> <p>The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</p> <code>20</code> <code>offset</code> <code>int</code> <p>The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.</p> <code>0</code> <p>Returns:</p> Type Description <code>Navigation | None</code> <p>A Navigation Object of Album Objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_artist_top_tracks","title":"<code>get_artist_top_tracks(artist_id, market=None)</code>","text":"<p>returns a list of top Track Objects related to the artist specified by its id in a given market https://developer.spotify.com/documentation/web-api/reference/get-an-artists-top-tracks</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>Spotify id of the artist</p> required <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Track] | None</code> <p>list of Tracks objects or None if id does not match an artist</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_artist_related_artists","title":"<code>get_artist_related_artists(artist_id)</code>","text":"<p>returns a list of Artist Objects related to the artist specified by its id https://developer.spotify.com/documentation/web-api/reference/get-an-artists-related-artists</p> <p>Parameters:</p> Name Type Description Default <code>artist_id</code> <code>str</code> <p>Spotify id of the artist</p> required <p>Returns:</p> Type Description <code>list[Artist] | None</code> <p>list of Artist objects or None if id does not match an artist</p>"},{"location":"0sympyfy/#albums","title":"ALBUMS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_album","title":"<code>get_album(album_id, market=None)</code>","text":"<p>returns the details of an album specified by its id https://developer.spotify.com/documentation/web-api/reference/get-an-album</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>Spotify id of the album</p> required <code>market</code> <code>str | None</code> <p>Market to search in\u00b2</p> <code>None</code> <p>Returns:</p> Type Description <code>Album | None</code> <p>Album object or None if id does not match a track</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_several_albums","title":"<code>get_several_albums(album_ids, market=None)</code>","text":"<p>returns a list of Album Objects specified by a list of their ids https://developer.spotify.com/documentation/web-api/reference/get-multiple-albums</p> <p>Parameters:</p> Name Type Description Default <code>album_ids</code> <code>list[str]</code> <p>list of albums ids</p> required <code>market</code> <code>str | None</code> <p>Market to search in</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Album]</code> <p>list of Albums objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_album_tracks","title":"<code>get_album_tracks(album_id, market=None, limit=20, offset=0)</code>","text":"<p>returns a list of track Objects related to the album specified by its id in a given market. Result is paginated. https://developer.spotify.com/documentation/web-api/reference/get-an-albums-tracks</p> <p>Parameters:</p> Name Type Description Default <code>album_id</code> <code>str</code> <p>Spotify id of the artist</p> required <code>market</code> <code>str | None</code> <p>ISO 2 character country code of the market</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of tracks appearing</p> <code>20</code> <code>offset</code> <code>int</code> <p>Index of first track to return</p> <code>0</code> <p>Returns:</p> Type Description <code>Navigation | None</code> <p>A Navigation Object of Track Objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_new_releases","title":"<code>get_new_releases()</code>","text":"<p>Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player\u2019s \u201cBrowse\u201d tab). https://developer.spotify.com/documentation/web-api/reference/get-new-releases</p> <p>Returns:</p> Type Description <code>Navigation</code> <p>A Navigation object of Track Objects</p>"},{"location":"0sympyfy/#categories","title":"CATEGORIES","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_browse_category","title":"<code>get_browse_category(category_id, locale=None)</code>","text":"<p>Get a single category used to tag items in Spotify (on, for example, the Spotify player\u2019s \u201cBrowse\u201d tab). https://developer.spotify.com/documentation/web-api/reference/get-a-category</p> <p>Parameters:</p> Name Type Description Default <code>category_id</code> <code>str</code> <p>The Spotify category ID for the category.</p> required <code>locale</code> <code>str | None</code> <p>The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note: if locale is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).</p> <code>None</code> <p>Returns:</p> Type Description <code>Category | None</code> <p>a Category object or None if its the id is unknown</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_several_browse_categories","title":"<code>get_several_browse_categories(locale=None, limit=20, offset=0)</code>","text":"<p>Get a list of categories used to tag items in Spotify (on, for example, the Spotify player\u2019s \u201cBrowse\u201d tab). https://developer.spotify.com/documentation/web-api/reference/get-categories</p> <p>Parameters:</p> Name Type Description Default <code>locale</code> <code>str | None</code> <p>The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note: if locale is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).</p> <code>None</code> <code>limit</code> <code>int</code> <p>The maximum number of Categories to return. Default: 20. Minimum: 1. Maximum: 50.</p> <code>20</code> <code>offset</code> <code>int</code> <p>The index of the first Category to return. Default: 0 (the first Category). Use with limit to get the next set of Categories.</p> <code>0</code> <p>Returns:</p> Type Description <code>Navigation</code> <p>a Navigation Object of Category Objects</p>"},{"location":"0sympyfy/#genres","title":"GENRES","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.genres","title":"<code>genres: set[str]</code>  <code>property</code>","text":"<p>Retrieve a list of available genres seed parameter values for recommendations. This is the preferred way to get this information since it is lazy loaded from the api via the method get_markets https://developer.spotify.com/documentation/web-api/reference/get-recommendation-genres</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>list of genres seeds. Example: [\"alternative\",\"samba\"]</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_genres","title":"<code>get_genres()</code>","text":"<p>Retrieve a list of available genres seed parameter values for recommendations. Please use the genres property, this method is public only to match the Spotify API https://developer.spotify.com/documentation/web-api/reference/get-recommendation-genres</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>list of genres seeds. Example: [\"alternative\",\"samba\"]</p>"},{"location":"0sympyfy/#markets","title":"MARKETS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.markets","title":"<code>markets: set[str]</code>  <code>property</code>","text":"<p>returns the list of markets where Spotify is available. This is the preferred way to get this information since it is lazy loaded from the api via the method get_markets https://developer.spotify.com/documentation/web-api/reference/get-available-markets https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>list of ISO 3166-1 alpha-2 country codes</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_markets","title":"<code>get_markets()</code>","text":"<p>returns the list of markets where Spotify is available. Please use the markets property, this method is public only to match the Spotify API https://developer.spotify.com/documentation/web-api/reference/get-available-markets https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>list of ISO 3166-1 alpha-2 country codes</p>"},{"location":"0sympyfy/#playlists","title":"PLAYLISTS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_playlist","title":"<code>get_playlist(playlist_id, market=None, fields=None, additional_types=None)</code>","text":"<p>Get a playlist owned by a Spotify user. https://developer.spotify.com/documentation/web-api/reference/get-playlist</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>The Spotify ID of the playlist.</p> required <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.</p> <code>None</code> <code>fields</code> <code>str | None</code> <p>Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the playlist''s description and URI: fields=description,uri. A dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder: fields=tracks.items(added_at,added_by.id). Use multiple parentheses to drill down into nested objects, for example: fields=tracks.items(track(name,href,album(name,href))). Fields can be excluded by prefixing them with an exclamation mark, for example: fields=tracks.items(track(name,href,album(!name,href))) Example: fields=items(added_by.id,track(name,href,album(name,href)))</p> <code>None</code> <code>additional_types</code> <code>list[str] | None</code> <p>A comma-separated list of item types that your client supports besides the default track type. Valid types are: track and episode. Note: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future.</p> <code>None</code> <p>Returns:</p> Type Description <code>Playlist | None</code> <p>Playlist Object</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_playlists_by_category","title":"<code>get_playlists_by_category(category_id, limit=20, offset=0)</code>","text":"<p>Get a list of Spotify playlists tagged with a particular category. https://developer.spotify.com/documentation/web-api/reference/get-playlist-cover</p> <p>Parameters:</p> Name Type Description Default <code>category_id</code> <code>str</code> <p>The Spotify category ID for the category.</p> required <code>limit</code> <code>int</code> <p>The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</p> <code>20</code> <code>offset</code> <code>int</code> <p>The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.</p> <code>0</code> <p>Returns:</p> Type Description <code>tuple[str, Navigation] | None</code> <p>A string containing the localized message of a playlist and a Navigation Object of Playlist Objects.</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_playlist_cover_image","title":"<code>get_playlist_cover_image(playlist_id)</code>","text":"<p>Get the current image associated with a specific playlist. https://developer.spotify.com/documentation/web-api/reference/get-playlist-cover</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>The Spotify ID of the playlist.</p> required <p>Returns:</p> Type Description <code>list[Image] | None</code> <p>List of Image Objects</p>"},{"location":"0sympyfy/#search","title":"SEARCH","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_search","title":"<code>get_search(q='', type=None, market=None, limit=20, offset=0, include_external='')</code>","text":"<p>Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. https://developer.spotify.com/documentation/web-api/reference/search</p> <p>Parameters:</p> Name Type Description Default <code>q</code> <code>str</code> <p>Your search query.You can narrow down your search using field filters. The available filters are album, artist, track, year, upc, tag:hipster, tag:new, isrc, and genre. Each field filter only applies to certain result types. The artist and year filters can be used while searching albums, artists and tracks. You can filter on a single year or a range (e.g. 1955-1960). The album filter can be used while searching albums and tracks. The genre filter can be used while searching artists and tracks. The isrc and track filters can be used while searching tracks. The upc, tag:new and tag:hipster filters can only be used while searching albums. The tag:new filter will return albums released in the past two weeks and tag:hipster can be used to return only albums with the lowest 10% popularity.</p> <code>''</code> <code>type</code> <code>list[str] | None</code> <p>A comma-separated list of item types to search across. Search results include hits from all the specified item types. For example: q=abacab&amp;type=album,track returns both albums and tracks matching \"abacab\". Allowed values: \"album\", \"artist\", \"playlist\", \"track\", \"show\", \"episode\", \"audiobook\"</p> <code>None</code> <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter. Note: If neither market or user country are provided, the content is considered unavailable for the client. Users can view the country that is associated with their account in the account settings.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</p> <code>20</code> <code>offset</code> <code>int</code> <p>The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.</p> <code>0</code> <code>include_external</code> <code>str</code> <p>If include_external=audio is specified it signals that the client can play externally hosted audio content, and marks the content as playable in the response. By default externally hosted audio content is marked as unplayable in the response.</p> <code>''</code> <p>Returns:</p> Type Description <code>Search</code> <p>An Search Object</p>"},{"location":"0sympyfy/#shows","title":"SHOWS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_show","title":"<code>get_show(show_id, market=None)</code>","text":"<p>Get Spotify catalog information for a single show identified by its unique Spotify ID. https://developer.spotify.com/documentation/web-api/reference/get-a-show</p> <p>Parameters:</p> Name Type Description Default <code>show_id</code> <code>str</code> <p>Spotify id of the track</p> required <p>Returns:</p> Type Description <code>Show | None</code> <p>Show object or None if id does not match a show</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_several_shows","title":"<code>get_several_shows(show_ids, market=None)</code>","text":"<p>Get Spotify catalog information for several shows based on their Spotify IDs. https://developer.spotify.com/documentation/web-api/reference/get-multiple-shows</p> <p>Parameters:</p> Name Type Description Default <code>show_ids</code> <code>list[str]</code> <p>A list of the Spotify IDs for the shows. Maximum: 50 IDs.</p> required <p>Returns:</p> Type Description <code>list[Show]</code> <p>list of Show objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_show_episodes","title":"<code>get_show_episodes(show_id, market=None, limit=20, offset=0)</code>","text":"<p>Get Spotify catalog information about an show\u2019s episodes. Optional parameters can be used to limit the number of episodes returned. https://developer.spotify.com/documentation/web-api/reference/get-a-shows-episodes</p> <p>Parameters:</p> Name Type Description Default <code>show_id</code> <code>str</code> <p>The Spotify ID for the show.</p> required <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.</p> <code>20</code> <code>offset</code> <code>int</code> <p>The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.</p> <code>0</code> <p>Returns:</p> Type Description <code>Navigation | None</code> <p>A navigation Objet of Show Objects or None if id does not match a show</p>"},{"location":"0sympyfy/#tracks","title":"TRACKS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_track","title":"<code>get_track(track_id, market=None)</code>","text":"<p>Get Spotify catalog information for a single track identified by its unique Spotify ID. https://developer.spotify.com/documentation/web-api/reference/get-track</p> <p>Parameters:</p> Name Type Description Default <code>track_id</code> <code>str</code> <p>Spotify id of the track</p> required <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.</p> <code>None</code> <p>Returns:</p> Type Description <code>Track | None</code> <p>Track object or None if id does not match a track</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_several_tracks","title":"<code>get_several_tracks(track_ids, market=None)</code>","text":"<p>returns a list of Track Objects specified by a list of their ids https://developer.spotify.com/documentation/web-api/reference/get-several-tracks</p> <p>Parameters:</p> Name Type Description Default <code>track_ids</code> <code>list[str]</code> <p>list of tracks ids</p> required <code>market</code> <code>str | None</code> <p>Market to search in</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Track]</code> <p>list of Tracks objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_track_audio_features","title":"<code>get_track_audio_features(track_id)</code>","text":"<p>returns a Audio_features Object specified by its ids https://developer.spotify.com/documentation/web-api/reference/get-audio-features</p> <p>Parameters:</p> Name Type Description Default <code>track_id</code> <code>str</code> <p>Spotify id of the track</p> required <p>Returns:</p> Type Description <code>Audio_features | None</code> <p>List of Audio_features object</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_several_track_audio_features","title":"<code>get_several_track_audio_features(track_ids)</code>","text":"<p>returns a list of Audio_features Object specified by a list of their ids https://developer.spotify.com/documentation/web-api/reference/get-several-audio-features</p> <p>Parameters     track_ids: list of tracks ids</p> <p>Returns:</p> Type Description <code>list[Audio_features]</code> <p>List of Audio_features objects</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_track_audio_analysis","title":"<code>get_track_audio_analysis(track_id)</code>","text":"<p>Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track\u2019s structure and musical content, including rhythm, pitch, and timbre. https://developer.spotify.com/documentation/web-api/reference/get-audio-analysis</p> <p>Parameters:</p> Name Type Description Default <code>track_id</code> <code>str</code> <p>The Spotify ID for the track.</p> required <p>Returns:</p> Type Description <code>Audio_analysis | None</code> <p>An Audio analysis Object</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_track_recommendations","title":"<code>get_track_recommendations(market=None, limit=20, seed_artists=None, seed_genres=None, seed_tracks=None, tunable_track_attributes=None)</code>","text":"<p>Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details. For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. https://developer.spotify.com/documentation/web-api/reference/get-recommendations</p> <p>Parameters:</p> Name Type Description Default <code>market</code> <code>str | None</code> <p>An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is available in that market will be returned. If a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The target size of the list of recommended tracks. For seeds with unusually small pools or when highly restrictive filtering is applied, it may be impossible to generate the requested number of recommended tracks. Debugging information for such cases is available in the response. Default: 20. Minimum: 1. Maximum: 100.</p> <code>20</code> <code>seed_artists</code> <code>list[str] | None</code> <p>A list of Spotify IDs for seed artists. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres. Note: only required if seed_genres and seed_tracks are not set.</p> <code>None</code> <code>seed_genres</code> <code>list[str] | None</code> <p>A comma separated list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres. Note: only required if seed_artists and seed_tracks are not set.</p> <code>None</code> <code>seed_tracks</code> <code>list[str] | None</code> <p>A comma separated list of Spotify IDs for a seed track. Up to 5 seed values may be provided in any combination of seed_artists, seed_tracks and seed_genres. Note: only required if seed_artists and seed_genres are not set.</p> <code>None</code> <code>tunable_track_attributes</code> <code>dict[str, Any] | None</code> <p>A dictionary of attributes relatives to the track audio features. For each tunable track attribute, a hard floor on the selected track attribute\u2019s value can be provided. See tunable track attributes below for the list of available options. The attribute list is: min_acousticness, max_acousticness, target_acousticness, min_danceability, max_danceability, target_danceability, min_duration_ms, max_duration_ms, target_duration_ms, min_energy, max_energy, target_energy, min_instrumentalness, max_instrumentalness, target_instrumentalness, min_key, max_key, target_key, min_liveness, max_liveness, target_liveness, min_loudness, max_loudness, target_loudness, min_mode, max_mode, target_mode, min_popularity, max_popularity, target_popularity, min_speechiness, max_speechiness, target_speechiness, min_tempo, max_tempo, target_tempo, min_time_signature, max_time_signature, target_time_signature, min_valence, max_valence, target_valence The explanation of the terms acousticness, danceability ... etc ... can be found in the Audio_features object Documentation.</p> <code>None</code> <p>Returns:</p> Type Description <code>Recommendation</code> <p>A list of recommended Track Objects based the input parameters.</p>"},{"location":"0sympyfy/#users","title":"USERS","text":""},{"location":"0sympyfy/#sympyfy.Sympyfy.get_user_profile","title":"<code>get_user_profile(user_id)</code>","text":"<p>Get public profile information about a Spotify user specified by its id https://developer.spotify.com/documentation/web-api/reference/get-users-profile</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The user's Spotify user ID.</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User Object</p>"},{"location":"0sympyfy/#sympyfy.Sympyfy.get_users_follow_playlist","title":"<code>get_users_follow_playlist(playlist_id, user_ids)</code>","text":"<p>Check to see if one or more Spotify users are following a specified playlist. https://developer.spotify.com/documentation/web-api/reference/get-users-profile</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>The Spotify ID of the playlist.</p> required <code>user_ids</code> <code>list[str]</code> <p>A  list of Spotify User IDs ; the ids of the users that you want to check to see if they follow the playlist. Maximum: 5 ids.</p> required <p>Returns:</p> Type Description <code>list[bool] | None</code> <p>list of bool</p>"},{"location":"1structs/","title":"Sympyfy Structures","text":""},{"location":"1structs/#sympyfy.api_structures","title":"<code>api_structures</code>","text":"<p>contains the data structures for the spotify API</p>"},{"location":"1structs/#sympyfy.api_structures.Album","title":"<code>Album</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Stores the data relative to the Album</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID of the album.</p> required <code>name</code> <code>str</code> <p>The name of the album. In case of an album takedown, the value may be an empty string.</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the album.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the album.</p> required <code>popularity</code> <code>int</code> <p>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.</p> required <code>type</code> <code>str</code> <p>The object type. Allowed values: \"album\"</p> required <code>album_type</code> <code>str</code> <p>The type of the album. Allowed values: \"album\", \"single\", \"compilation\"</p> required <code>album_group</code> <code>str</code> <p>This field describes the relationship between the artist and the album. Allowed values: \"album\", \"single\", \"compilation\", \"appears_on\" Optional, default = None</p> required <code>release_date</code> <code>str</code> <p>The date the album was first released.</p> required <code>release_date_precision</code> <code>str</code> <p>The precision with which release_date value is known. Allowed values: \"year\", \"month\", \"day\"</p> required <code>available_markets</code> <code>list[str]</code> <p>The markets in which the album is available: ISO 3166-1 alpha-2 country codes. NOTE: an album is considered available in a market when at least 1 of its tracks is available in that market. Optional, default = []</p> required <code>genres</code> <code>list[str]</code> <p>A list of the genres the album is associated with. If not yet classified, the array is empty. Optional, default = []</p> required <code>label</code> <code>str</code> <p>The label associated with the album.</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>Known external URLs for this album. Optional, default = {}</p> required <code>external_ids</code> <code>dict[str, str]</code> <p>Known external IDs for the album. Optional, default = {}</p> required <code>copyrights</code> <code>list[dict[str, str]]</code> <p>The copyright statements of the album. Optional, default = []</p> required <code>restrictions</code> <code>dict[str, str]</code> <p>Included in the response when a content restriction is applied. Optional, default = {}</p> required <code>images</code> <code>list[Image]</code> <p>The cover art for the album in various sizes, widest first. Optional, default = []</p> required <code>artists</code> <code>list[Artist]</code> <p>The artists of the album.</p> required <code>total_tracks</code> <code>int</code> <p>The total number of items available to return.</p> required <code>tracks</code> <code>Navigation</code> <p>The tracks of the album in a Navigation Object Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Artist","title":"<code>Artist</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Stores the data relative to Artist</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID for the artist.</p> required <code>name</code> <code>str</code> <p>The name of the artist.</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the artist.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the artist.</p> required <code>popularity</code> <code>int</code> <p>The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.</p> required <code>type</code> <code>str</code> <p>The object type. Allowed values: \"artist\"</p> required <code>followers</code> <code>Followers</code> <p>The total number of followers. Optional, default = None</p> required <code>genres</code> <code>list[str]</code> <p>A list of the genres the artist is associated with. If not yet classified, the array is empty. Optional, default = []</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>Known external URLs for this artist. Optional, default = {}</p> required <code>images</code> <code>list[Image]</code> <p>Images of the artist in various sizes, widest first. Optional, default = []</p> required"},{"location":"1structs/#sympyfy.api_structures.Audio_analysis","title":"<code>Audio_analysis</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track\u2019s structure and musical content, including rhythm, pitch, and timbre.</p> <p>Parameters:</p> Name Type Description Default <code>audio_analysis_meta</code> <code>Audio_analysis_meta</code> <p>Audio_analysis_meta Object</p> required <code>audio_analysis_properties</code> <code>Audio_analysis_properties</code> <p>Audio_analysis_properties Object</p> required <code>bars</code> <code>list[Bar]</code> <p>list of Bar Objects</p> required <code>beats</code> <code>list[Beat]</code> <p>list of Beat Objects</p> required <code>tatums</code> <code>list[Tatum]</code> <p>list of Tatum Objects</p> required <code>sections</code> <code>list[Section]</code> <p>list of Section Objects</p> required <code>segments</code> <code>list[Segment]</code> <p>list of Segment Objects</p> required"},{"location":"1structs/#sympyfy.api_structures.Audio_analysis_meta","title":"<code>Audio_analysis_meta</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Parameters of the audio analysisn how and when the analysis was done.</p> <p>Parameters:</p> Name Type Description Default <code>analyzer_version</code> <code>str</code> <p>The version of the Analyzer used to analyze this track.</p> required <code>platform</code> <code>str</code> <p>The platform used to read the track's audio data.</p> required <code>detailed_status</code> <code>str</code> <p>A detailed status code for this track. If analysis data is missing, this code may explain why.</p> required <code>status_code</code> <code>int</code> <p>The return code of the analyzer process. 0 if successful, 1 if any errors occurred.</p> required <code>timestamp</code> <code>int</code> <p>The Unix timestamp (in seconds) at which this track was analyzed.</p> required <code>analysis_time</code> <code>float</code> <p>The amount of time taken to analyze this track.</p> required <code>input_process</code> <code>str</code> <p>The method used to read the track's audio data.</p> required"},{"location":"1structs/#sympyfy.api_structures.Audio_analysis_properties","title":"<code>Audio_analysis_properties</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Various audio properties linked to the whole track.</p> <p>Parameters:</p> Name Type Description Default <code>num_samples</code> <code>int</code> <p>The exact number of audio samples analyzed from this track. See also analysis_sample_rate.</p> required <code>duration</code> <code>float</code> <p>Length of the track in seconds.</p> required <code>sample_md5</code> <code>str</code> <p>This field will always contain the empty string.</p> required <code>offset_seconds</code> <code>float</code> <p>An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)</p> required <code>window_seconds</code> <code>float</code> <p>The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)</p> required <code>analysis_sample_rate</code> <code>int</code> <p>The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.</p> required <code>analysis_channels</code> <code>int</code> <p>The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.</p> required <code>end_of_fade_in</code> <code>float</code> <p>The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.</p> required <code>start_of_fade_out</code> <code>float</code> <p>The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.</p> required <code>loudness</code> <code>float</code> <p>The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.</p> required <code>tempo</code> <code>float</code> <p>The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.</p> required <code>tempo_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the tempo.</p> required <code>time_signature</code> <code>int</code> <p>An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\". Range: 3 - 7</p> required <code>time_signature_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the time_signature. Range: 0 - 1</p> required <code>key</code> <code>int</code> <p>The key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C\u266f/D\u266d, 2 = D, and so on. If no key was detected, the value is -1. Range: -1 - 11</p> required <code>key_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the key. Range: 0 - 1</p> required <code>mode</code> <code>int</code> <p>Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.</p> required <code>mode_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the mode. Range: 0 - 1</p> required <code>codestring</code> <code>str</code> <p>An Echo Nest Musical Fingerprint (ENMFP) codestring for this track.</p> required <code>code_version</code> <code>float</code> <p>A version number for the Echo Nest Musical Fingerprint format used in the codestring field.</p> required <code>echoprintstring</code> <code>str</code> <p>An EchoPrint codestring for this track.</p> required <code>echoprint_version</code> <code>float</code> <p>A version number for the EchoPrint format used in the echoprintstring field.</p> required <code>synchstring</code> <code>str</code> <p>A Synchstring for this track.</p> required <code>synch_version</code> <code>float</code> <p>A version number for the Synchstring used in the synchstring field.</p> required <code>rhythmstring</code> <code>str</code> <p>A Rhythmstring for this track. The format of this string is similar to the Synchstring.</p> required <code>rhythm_version</code> <code>float</code> <p>A version number for the Rhythmstring used in the rhythmstring field.</p> required"},{"location":"1structs/#sympyfy.api_structures.Audio_features","title":"<code>Audio_features</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Stores the data relative to the Album</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID for the track.</p> required <code>track_href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the track.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the track.</p> required <code>analysis_url</code> <code>str</code> <p>A URL to access the full audio analysis of this track. An access token is required to access this data. Optional, default = None</p> required <code>type</code> <code>str</code> <p>The object type. Allowed values: \"audio_features\"</p> required <code>key</code> <code>int</code> <p>The key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C\u266f/D\u266d, 2 = D, and so on. If no key was detected, the value is -1. Range: -1 - 11 Optional, default = None</p> required <code>mode</code> <code>int</code> <p>Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. Optional, default = None</p> required <code>time_signature</code> <code>int</code> <p>An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\". Range: 3 - 7 Optional, default = None</p> required <code>duration_ms</code> <code>int</code> <p>The duration of the track in milliseconds.</p> required <code>danceability</code> <code>float</code> <p>Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. Optional, default = None</p> required <code>energy</code> <code>float</code> <p>Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. Optional, default = None</p> required <code>loudness</code> <code>float</code> <p>The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. Optional, default = None</p> required <code>speechiness</code> <code>float</code> <p>Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. Optional, default = None</p> required <code>acousticness</code> <code>float</code> <p>A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. Range: 0 - 1 Optional, default = None</p> required <code>instrumentalness</code> <code>float</code> <p>Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. Optional, default = None</p> required <code>liveness</code> <code>float</code> <p>Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. Optional, default = None</p> required <code>valence</code> <code>float</code> <p>A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). Range: 0 - 1 Optional, default = None</p> required <code>tempo</code> <code>float</code> <p>The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Bar","title":"<code>Bar</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The starting point (in seconds) of the time interval.</p> required <code>duration</code> <code>float</code> <p>The duration (in seconds) of the time interval.</p> required <code>confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the interval. Range: 0 - 1</p> required"},{"location":"1structs/#sympyfy.api_structures.Beat","title":"<code>Beat</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The starting point (in seconds) of the time interval.</p> required <code>duration</code> <code>float</code> <p>The duration (in seconds) of the time interval.</p> required <code>confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the interval. Range: 0 - 1</p> required"},{"location":"1structs/#sympyfy.api_structures.Category","title":"<code>Category</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get a single category used to tag items in Spotify (on, for example, the Spotify player\u2019s \u201cBrowse\u201d tab).</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify category ID of the category.</p> required <code>name</code> <code>str</code> <p>The name of the category.</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint returning full details of the category.</p> required <code>icons</code> <code>list[Image]</code> <p>The category icon, in various sizes.</p> required"},{"location":"1structs/#sympyfy.api_structures.Episode","title":"<code>Episode</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get Spotify catalog information for a single show.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID for the episode.</p> required <code>name</code> <code>str</code> <p>The name of the episode.</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the episode.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the episode.</p> required <code>type</code> <code>str</code> <p>The object type. Allowed values: \"episode\"</p> required <code>description</code> <code>str</code> <p>A description of the episode. HTML tags are stripped away from this field, use html_description field in case HTML tags are needed.</p> required <code>html_description</code> <code>str</code> <p>A description of the episode. This field may contain HTML tags.</p> required <code>audio_preview_url</code> <code>str</code> <p>A URL to a 30 second preview (MP3 format) of the episode. null if not available.</p> required <code>release_date</code> <code>str</code> <p>The date the episode was first released, for example \"1981-12-15\". Depending on the precision, it might be shown as \"1981\" or \"1981-12\".</p> required <code>release_date_precision</code> <code>str</code> <p>The precision with which release_date value is known. Allowed values: \"year\", \"month\", \"day\"</p> required <code>duration_ms</code> <code>int</code> <p>The episode length in milliseconds.</p> required <code>explicit</code> <code>bool</code> <p>Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).</p> required <code>is_externally_hosted</code> <code>bool</code> <p>True if the episode is hosted outside of Spotify's CDN.</p> required <code>is_playable</code> <code>bool</code> <p>True if the episode is playable in the given market. Otherwise false.</p> required <code>languages</code> <code>list[str]</code> <p>A list of the languages used in the episode, identified by their ISO 639-1 code.</p> required <code>restrictions</code> <code>list[str]</code> <p>Included in the response when a content restriction is applied. Optional, default = {}</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>External URLs for this episode. Optional, default = {}</p> required <code>images</code> <code>list[Image]</code> <p>The cover art for the episode in various sizes, widest first.</p> required <code>resume_point</code> <code>Resume_point</code> <p>The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Followers","title":"<code>Followers</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Information about the followers of the artist or user.</p> <p>Parameters:</p> Name Type Description Default <code>href</code> <code>str</code> <p>This will always be set to null, as the Web API does not support it at the moment. Optional, default = None</p> required <code>total</code> <code>int</code> <p>The total number of followers.</p> required"},{"location":"1structs/#sympyfy.api_structures.Image","title":"<code>Image</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Stores the data relative to images of Artists or Albums</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The source URL of the image.</p> required <code>height</code> <code>int</code> <p>The image height in pixels. Optional, default = None</p> required <code>width</code> <code>int</code> <p>The image width in pixels. Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Navigation","title":"<code>Navigation</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Stores the data needed to navigate paginated content</p> <p>Parameters:</p> Name Type Description Default <code>href</code> <code>str</code> <p>A link to the Web API endpoint returning the full result of the request</p> required <code>next</code> <code>str</code> <p>URL to the next page of items. ( null if none) Optional, default = None</p> required <code>previous</code> <code>str</code> <p>URL to the previous page of items. ( null if none) Optional, default = None</p> required <code>limit</code> <code>int</code> <p>The maximum number of items in the response (as set in the query or by default).</p> required <code>offset</code> <code>int</code> <p>The offset of the items returned (as set in the query or by default)</p> required <code>total</code> <code>int</code> <p>The total number of items available to return.</p> required <code>items</code> <code>list[Track]|list[Episode]|list[Playlist_item]|list[Playlist]|list|Artist]|list[Album]|list[Show]</code> <p>list of objects paginated Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Playlist","title":"<code>Playlist</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get a playlist owned by a Spotify user. Every can be optional since they can be filtered by the 'fields' filter dor the query. See https://developer.spotify.com/documentation/web-api/reference/get-playlist for more explanations.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID for the playlist.</p> required <code>name</code> <code>str</code> <p>The name of the playlist.</p> required <code>owner</code> <code>User) </code> <p>The user who owns the playlist</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the playlist.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the playlist.</p> required <code>type</code> <code>str</code> <p>The object type: \"playlist\"</p> required <code>description</code> <code>str</code> <p>The playlist description. Only returned for modified, verified playlists,</p> required <code>followers</code> <code>Followers</code> <p>Information about the followers of the playlist.</p> required <code>snapshot_id</code> <code>str) </code> <p>The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version</p> required <code>public</code> <code>bool</code> <p>The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists</p> required <code>collaborative</code> <code>bool</code> <p>True if the owner allows other users to modify the playlist. otherwise null.</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>Known external URLs for this playlist.</p> required <code>images</code> <code>list[Image]</code> <p>Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See Working with Playlists. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day.</p> required <code>tracks</code> <code>Navigation</code> <p>The tracks of the playlist. A navigation Object of Playlist_item Objects</p> required"},{"location":"1structs/#sympyfy.api_structures.Playlist_item","title":"<code>Playlist_item</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The tracks of the playlist.</p> <p>Parameters:</p> Name Type Description Default <code>added_at</code> <code>str</code> <p>The date and time the track or episode was added. Note: some very old playlists may return null in this field. Optional, default = None</p> required <code>added_by</code> <code>User</code> <p>The Spotify user who added the track or episode. Note: some very old playlists may return null in this field. Optional, default = None</p> required <code>is_local</code> <code>bool</code> <p>Whether this track or episode is a local file or not. Optional, default = False</p> required <code>track</code> <code>Track | Episode</code> <p>Either a Track object or an Episode Object Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Recommendation","title":"<code>Recommendation</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details. For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.</p> <p>Parameters:</p> Name Type Description Default <code>seeds</code> <code>list[Seed]</code> <p>A list of recommendation seed objects.</p> required <code>tracks</code> <code>list[Track]</code> <p>A list of recommended Track Objects.</p> required"},{"location":"1structs/#sympyfy.api_structures.Resume_point","title":"<code>Resume_point</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.</p> <p>Parameters:</p> Name Type Description Default <code>fully_played</code> <code>bool</code> <p>Whether or not the episode has been fully played by the user.</p> required <code>resume_position_ms</code> <code>int</code> <p>The user's most recent position in the episode in milliseconds.</p> required"},{"location":"1structs/#sympyfy.api_structures.Search","title":"<code>Search</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets.</p> <p>Parameters:</p> Name Type Description Default <code>tracks</code> <code>Navigation</code> <p>A navigation Object of Track Objects</p> required <code>artists</code> <code>Navigation</code> <p>A navigation Object of Artist Objects</p> required <code>albums</code> <code>Navigation</code> <p>A navigation Object of Album Objects</p> required <code>playlists</code> <code>Navigation</code> <p>A navigation Object of Playlist Objects</p> required <code>shows</code> <code>Navigation</code> <p>A navigation Object of Show Objects</p> required <code>episodes</code> <code>Navigation</code> <p>A navigation Object of Episode Objects</p> required"},{"location":"1structs/#sympyfy.api_structures.Section","title":"<code>Section</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The starting point (in seconds) of the section.</p> required <code>duration</code> <code>float</code> <p>The duration (in seconds) of the section.</p> required <code>confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\". Range: 0 - 1</p> required <code>loudness</code> <code>float</code> <p>The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.</p> required <code>tempo</code> <code>float</code> <p>The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.</p> required <code>tempo_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field. Range: 0 - 1</p> required <code>key</code> <code>int</code> <p>The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C\u266f/D\u266d, 2 = D, and so on). If no key was detected, the value is -1.</p> required <code>key_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field. Range: 0 - 1</p> required <code>mode</code> <code>int</code> <p>Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.</p> required <code>mode_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the mode. Range: 0 - 1</p> required <code>time_signature</code> <code>int</code> <p>An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\". Range: 3 - 7</p> required <code>time_signature_confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the time_signature. Sections with time signature changes may correspond to low values in this field. Range: 0 - 1</p> required"},{"location":"1structs/#sympyfy.api_structures.Seed","title":"<code>Seed</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A recommendation seed objects that give statistics about the search.</p> <p>Parameters:</p> Name Type Description Default <code>afterFilteringSize</code> <code>int</code> <p>The number of tracks available after min_ and max_ filters have been applied.</p> required <code>afterRelinkingSize</code> <code>int</code> <p>The number of tracks available after relinking for regional availability.</p> required <code>href</code> <code>str</code> <p>A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be null. Optional, default = None (is always None for GENRE)</p> required <code>id</code> <code>str</code> <p>The id used to select this seed. This will be the same as the string used in the seed_artists, seed_tracks or seed_genres parameter.</p> required <code>initialPoolSize</code> <code>int</code> <p>The number of recommended tracks available for this seed.</p> required <code>type</code> <code>str</code> <p>The entity type of this seed. One of \"ARTIST\", \"TRACK\" or \"GENRE\".</p> required"},{"location":"1structs/#sympyfy.api_structures.Segment","title":"<code>Segment</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Each segment contains a roughly conisistent sound throughout its duration.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The starting point (in seconds) of the section.</p> required <code>duration</code> <code>float</code> <p>The duration (in seconds) of the section.</p> required <code>confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\". Range: 0 - 1</p> required <code>loudness_start</code> <code>float</code> <p>The onset loudness of the segment in decibels (dB). Combined with loudness_max and loudness_max_time, these components can be used to describe the \"attack\" of the segment.</p> required <code>loudness_max</code> <code>float</code> <p>The peak loudness of the segment in decibels (dB). Combined with loudness_start and loudness_max_time, these components can be used to describe the \"attack\" of the segment.</p> required <code>loudness_max_time</code> <code>float</code> <p>The segment-relative offset of the segment peak loudness in seconds. Combined with loudness_start and loudness_max, these components can be used to desctibe the \"attack\" of the segment.</p> required <code>loudness_end</code> <code>float</code> <p>The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.</p> required <code>pitches</code> <code>list[int]</code> <p>Pitch content is given by a \u201cchroma\u201d vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).     Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.</p> required"},{"location":"1structs/#sympyfy.api_structures.Show","title":"<code>Show</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get Spotify catalog information for a single show.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID for the show.</p> required <code>name</code> <code>str</code> <p>The name of the show.</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the show.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the show.</p> required <code>type</code> <code>str</code> <p>The object type. Allowed values: \"show\"</p> required <code>media_type</code> <code>str</code> <p>The media type of the show.</p> required <code>publisher</code> <code>str</code> <p>The publisher of the show.</p> required <code>description</code> <code>str</code> <p>A description of the show. HTML tags are stripped away from this field, use html_description field in case HTML tags are needed.</p> required <code>html_description</code> <code>str</code> <p>A description of the show. This field may contain HTML tags.</p> required <code>total_episodes</code> <code>int</code> <p>The total number of episodes in the show.</p> required <code>available_markets</code> <code>list[str]</code> <p>A list of the countries in which the show can be played, identified by their ISO 3166-1 alpha-2 code.</p> required <code>explicit</code> <code>bool</code> <p>Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).</p> required <code>is_externally_hosted</code> <code>bool</code> <p>True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be null in some cases.</p> required <code>languages</code> <code>list[str]</code> <p>A list of the languages used in the show, identified by their ISO 639 code.</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>External URLs for this show. Optional, default = {}</p> required <code>copyrights</code> <code>list[dict[str, str]]</code> <p>The copyright statements of the show. Optional, default = []</p> required <code>images</code> <code>list[Image]</code> <p>The cover art for the show in various sizes, widest first. Optional, default = []</p> required <code>episodes</code> <code>Navigation]</code> <p>The episodes of the show in a Navigation Object Optional, default = None</p> required"},{"location":"1structs/#sympyfy.api_structures.Tatum","title":"<code>Tatum</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The starting point (in seconds) of the time interval.</p> required <code>duration</code> <code>float</code> <p>The duration (in seconds) of the time interval.</p> required <code>confidence</code> <code>float</code> <p>The confidence, from 0.0 to 1.0, of the reliability of the interval. Range: 0 - 1</p> required"},{"location":"1structs/#sympyfy.api_structures.Track","title":"<code>Track</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Stores the data relative to Track</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The Spotify ID for the track.</p> required <code>name</code> <code>str</code> <p>The name of the track.</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint providing full details of the track.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for the track.</p> required <code>popularity</code> <code>int</code> <p>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.</p> required <code>type</code> <code>str</code> <p>The object type: \"track\". Allowed values: \"track\"</p> required <code>preview_url</code> <code>str</code> <p>A link to a 30 second preview (MP3 format) of the track. Can be null Optional, default = None</p> required <code>disc_number</code> <code>int</code> <p>The disc number (usually 1 unless the album consists of more than one disc).</p> required <code>track_number</code> <code>int</code> <p>The number of the track. If an album has several discs, the track number is the number on the specified disc.</p> required <code>duration_ms</code> <code>int</code> <p>The track length in milliseconds.</p> required <code>explicit</code> <code>bool</code> <p>Whether or not the track has explicit lyrics ( true = yes it does; false = no it does not OR unknown).</p> required <code>is_local</code> <code>bool</code> <p>Whether or not the track is from a local file.</p> required <code>is_playable</code> <code>bool</code> <p>Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.</p> required <code>external_ids</code> <code>dict[str, str]</code> <p>Known external IDs for the track. Optional, default = {}</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>Known external URLs for this track. Optional, default = {}</p> required <code>artists</code> <code>list[Artist]</code> <p>The artists who performed the track. Optional, default = []</p> required <code>available_markets</code> <code>list[str]]</code> <p>A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. Optional, default = []</p> required <code>album</code> <code>Album</code> <p>The album on which the track appears. Optional, default = None</p> required <code>linked_from</code> <code>dict[str, Any]</code> <p>Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track. Optional, default = None</p> required <code>restrictions</code> <code>dict[str, str]</code> <p>Included in the response when a content restriction is applied. Optional, default = {}</p> required"},{"location":"1structs/#sympyfy.api_structures.User","title":"<code>User</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Get public profile information about a Spotify user.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The user's Spotify user ID.</p> required <code>display_name</code> <code>str</code> <p>The name displayed on the user's profile. null if not available. Optional, default = None</p> required <code>href</code> <code>str</code> <p>A link to the Web API endpoint for this user.</p> required <code>uri</code> <code>str</code> <p>The Spotify URI for this user.</p> required <code>type</code> <code>str</code> <p>The object type. Allowed values: \"user\"</p> required <code>followers</code> <code>Followers</code> <p>Information about the followers of this user. Optional, default = None</p> required <code>external_urls</code> <code>dict[str, str]</code> <p>Known public external URLs for this user. Optional, default = {}</p> required <code>images</code> <code>list[Image]</code> <p>The user's profile image. Optional, default = []</p> required"},{"location":"1structs/#authentication","title":"Authentication","text":""},{"location":"1structs/#sympyfy.access_token.Auth_type","title":"<code>Auth_type</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Authentication type:     - APP: authentication via client_id / client_secret with access only to app APIs. See https://developer.spotify.com/documentation/web-api/concepts/access-token     - USER: authentication via Oauth2 Authorization code flow. See https://developer.spotify.com/documentation/web-api/tutorials/code-flow</p>"},{"location":"8demo/","title":"API DEMO with APP auth","text":"DEMO<pre><code>from rich.console import Console\n\nfrom sympyfy import Sympyfy\nfrom operator import itemgetter\n\nconsole = Console()\n\n    spotify = Sympyfy()\n    spotify.load_credentials()\n\n    artist = spotify.get_artist(id)\n    albums = spotify.get_artist_albums(id, limit=50, offset=0, include_groups=[\"album\", \"compilation\", \"single\"])\n    album_ids = []\n    more_albums = True\n    while more_albums:\n        album_ids += [{\"name\":x.name, \"id\": x.id, \"release_date\":x.release_date} for x in albums.items]\n        more_albums = albums and albums.next\n        albums = spotify.get_artist_albums(id, limit=50, offset=albums.offset + 50, include_groups=[\"album\", \"compilation\", \"single\"])\n\n    with open(\"docs/demo.md\", \"w\") as md:\n        md.write(f\"#API DEMO with APP auth\\n\\n\")\n        md.write(f\"##{artist.name}\\n\")\n\n        for x in sorted(album_ids, key=itemgetter('release_date')):\n            md.write(f\"###{x['name']}  _({x['release_date']})_\\n\")\n\n            tracks = spotify.get_album_tracks(x[\"id\"], limit=50, offset=0)\n            tracks_ids = []\n            more_tracks = True\n            while more_tracks:\n                tracks_ids += [{\"name\": x.name, \"id\": x.id, \"disc_number\":x.disc_number, \"track_number\": x.track_number, \"sort\": f\"{x.disc_number:02}-{x.track_number:02}\"} for x in tracks.items]\n                more_tracks = tracks and tracks.next\n                tracks = spotify.get_album_tracks(x[\"id\"], limit=50, offset=tracks.offset + 50)\n\n            for x in sorted(tracks_ids, key=itemgetter('sort')):\n                md.write(f\" - {x['disc_number']}-{x['track_number']}  {x['name']}\\n\")\n\n            md.write(\"\\n\")\n</code></pre>"},{"location":"8demo/#nirvana","title":"Nirvana","text":"<p>Bleach  _(1989-06-01)</p> Disc - Track Title 1-1 Blew 1-2 Floyd The Barber 1-3 About A Girl 1-4 School 1-5 Love Buzz 1-6 Paper Cuts 1-7 Negative Creep 1-8 Scoff 1-9 Swap Meet 1-10 Mr. Moustache 1-11 Sifting 1-12 Big Cheese 1-13 Downer <p>Bleach (Deluxe Edition)  _(1989-06-15)</p> Disc - Track Title 1-1 Blew 1-2 Floyd The Barber 1-3 About A Girl 1-4 School 1-5 Love Buzz 1-6 Paper Cuts 1-7 Negative Creep 1-8 Scoff 1-9 Swap Meet 1-10 Mr. Moustache 1-11 Sifting 1-12 Big Cheese 1-13 Downer 1-14 Intro (Live at Pine Street Theatre) 1-15 School (Live at Pine Street Theatre) 1-16 Floyd The Barber (Live at Pine Street Theatre) 1-17 Dive (Live at Pine Street Theatre) 1-18 Love Buzz (Live at Pine Street Theatre) 1-19 Spank Thru (Live at Pine Street Theatre) 1-20 Molly's Lips (Live at Pine Street Theatre) 1-21 Sappy (Live at Pine Street Theatre) 1-22 Scoff (Live at Pine Street Theatre) 1-23 About A Girl (Live at Pine Street Theatre) 1-24 Been A Son (Live at Pine Street Theatre) 1-25 Blew (Live at Pine Street Theatre) <p>Nevermind (Super Deluxe Edition)  _(1991-09-26)</p> Disc - Track Title 1-1 Smells Like Teen Spirit 1-2 In Bloom 1-3 Come As You Are 1-4 Breed 1-5 Lithium 1-6 Polly 1-7 Territorial Pissings 1-8 Drain You 1-9 Lounge Act 1-10 Stay Away 1-11 On A Plain 1-12 Something In The Way 1-13 Endless, Nameless 1-14 Even In His Youth - B-Side 1-15 Aneurysm 1-16 Curmudgeon 1-17 D-7 - Live At The BBC 1-18 Been A Son - Live At Paramount Theatre B-Side 1-19 School - Live At Paramount Theatre/1991 1-20 Drain You - Live At Paramount Theatre B-Side 1-21 Sliver - Live At Del Mar B-Side 1-22 Polly - Live At Del Mar B-Side 2-1 In Bloom - Smart Sessions 2-2 Immodium (Breed) - Smart Sessions 2-3 Lithium - Smart Sessions 2-4 Polly - Smart Sessions 2-5 Pay To Play - Smart Sessions 2-6 Here She Comes Now - Smart Sessions 2-7 Dive - Smart Sessions 2-8 Sappy - Smart Sessions 2-9 Smells Like Teen Spirit - Boombox Rehearsals 2-10 Verse Chorus Verse - Boombox Rehearsals 2-11 Territorial Pissings - Boombox Rehearsals 2-12 Lounge Act - Boombox Rehearsals 2-13 Come As You Are - Boombox Rehearsals 2-14 Old Age - Boombox Rehearsals 2-15 Something In The Way - Boombox Rehearsals 2-16 On A Plain - Boombox Rehearsals 2-17 Drain You - Live At The BBC 2-18 Something In The Way - Live At The BBC 3-1 Smells Like Teen Spirit - Devonshire Mix 3-2 In Bloom - Devonshire Mix 3-3 Come As You Are - Devonshire Mix 3-4 Breed - Devonshire Mix 3-5 Lithium - Devonshire Mix 3-6 Territorial Pissings - Devonshire Mix 3-7 Drain You - Devonshire Mix 3-8 Lounge Act - Devonshire Mix 3-9 Stay Away - Devonshire Mix 3-10 On A Plain - Devonshire Mix 3-11 Something In The Way - Devonshire Mix 4-1 Jesus Doesn't Want Me For A Sunbeam - Live At The Paramount 4-2 Aneurysm - Live At The Paramount 4-3 Drain You - Live At The Paramount/1991 4-4 School - Live At The Paramount 4-5 Floyd The Barber - Live At The Paramount 4-6 Smells Like Teen Spirit - Live At The Paramount 4-7 About A Girl - Live At The Paramount 4-8 Polly - Live At The Paramount 4-9 Breed - Live At The Paramount 4-10 Sliver - Live At The Paramount 4-11 Love Buzz - Live At The Paramount 4-12 Lithium - Live At The Paramount 4-13 Been A Son - Live At The Paramount 4-14 Negative Creep - Live At The Paramount 4-15 On A Plain - Live At The Paramount 4-16 Blew - Live At The Paramount 4-17 Rape Me - Live At The Paramount 4-18 Territorial Pissings - Live At The Paramount 4-19 Endless, Nameless - Live At The Paramount <p>Nevermind (Remastered)  _(1991-09-26)</p> Disc - Track Title 1-1 Smells Like Teen Spirit 1-2 In Bloom 1-3 Come As You Are 1-4 Breed 1-5 Lithium 1-6 Polly 1-7 Territorial Pissings 1-8 Drain You 1-9 Lounge Act 1-10 Stay Away 1-11 On A Plain 1-12 Something In The Way 1-13 Endless, Nameless <p>Nevermind (Deluxe Edition)  _(1991-09-26)</p> Disc - Track Title 1-1 Smells Like Teen Spirit 1-2 In Bloom 1-3 Come As You Are 1-4 Breed 1-5 Lithium 1-6 Polly 1-7 Territorial Pissings 1-8 Drain You 1-9 Lounge Act 1-10 Stay Away 1-11 On A Plain 1-12 Something In The Way 1-13 Endless, Nameless 1-14 Even In His Youth - B-Side 1-15 Aneurysm 1-16 Curmudgeon 1-17 D-7 - Live At The BBC 1-18 Been A Son - Live At Paramount Theatre B-Side 1-19 School - Live At Paramount Theatre/1991 1-20 Drain You - Live At Paramount Theatre B-Side 1-21 Sliver - Live At Del Mar B-Side 1-22 Polly - Live At Del Mar B-Side 2-1 In Bloom - Smart Sessions 2-2 Immodium (Breed) - Smart Sessions 2-3 Lithium - Smart Sessions 2-4 Polly - Smart Sessions 2-5 Pay To Play - Smart Sessions 2-6 Here She Comes Now - Smart Sessions 2-7 Dive - Smart Sessions 2-8 Sappy - Smart Sessions 2-9 Smells Like Teen Spirit - Boombox Rehearsals 2-10 Verse Chorus Verse - Boombox Rehearsals 2-11 Territorial Pissings - Boombox Rehearsals 2-12 Lounge Act - Boombox Rehearsals 2-13 Come As You Are - Boombox Rehearsals 2-14 Old Age - Boombox Rehearsals 2-15 Something In The Way - Boombox Rehearsals 2-16 On A Plain - Boombox Rehearsals 2-17 Drain You - Live At The BBC 2-18 Something In The Way - Live At The BBC <p>Incesticide  _(1992-12-14)</p> Disc - Track Title 1-1 Dive 1-2 Sliver 1-3 Stain 1-4 Been A Son - BBC Mark Goodier Session 1-5 Turnaround - BBC John Peel Session 1990 1-6 Molly's Lips - BBC John Peel Session 1990 1-7 Son Of A Gun - BBC John Peel Session 1990 1-8 (New Wave) Polly - BBC Mark Goodier Session 1-9 Beeswax 1-10 Downer 1-11 Mexican Seafood 1-12 Hairspray Queen 1-13 Aero Zeppelin 1-14 Big Long Now 1-15 Aneurysm <p>In Utero (Super Deluxe Edition)  _(1993-09-21)</p> Disc - Track Title 1-1 Serve The Servants 1-2 Scentless Apprentice 1-3 Heart-Shaped Box 1-4 Rape Me 1-5 Frances Farmer Will Have Her Revenge On Seattle 1-6 Dumb 1-7 Very Ape 1-8 Milk It 1-9 Pennyroyal Tea 1-10 Radio Friendly Unit Shifter 1-11 Tourette's 1-12 All Apologies 1-13 Gallons Of Rubbing Alcohol Flow Through The Strip 1-14 Marigold 1-15 Moist Vagina - 2013 Mix 1-16 Sappy - 2013 Mix 1-17 I Hate Myself And Want To Die - 2013 Mix 1-18 Pennyroyal Tea - Scott Litt Mix 1-19 Heart Shaped Box - Original Steve Albini 1993 Mix 1-20 All Apologies - Original Steve Albini 1993 Mix 2-1 Serve The Servants - 2013 Mix 2-2 Scentless Apprentice - 2013 Mix 2-3 Heart Shaped Box - 2013 Mix 2-4 Rape Me - 2013 Mix 2-5 Frances Farmer Will Have Her Revenge On Seattle - 2013 Mix 2-6 Dumb - 2013 Mix 2-7 Very Ape - 2013 Mix 2-8 Milk It - 2013 Mix 2-9 Pennyroyal Tea - 2013 Mix 2-10 Radio Friendly Unit Shifter - 2013 Mix 2-11 Tourette's - 2013 Mix 2-12 All Apologies - 2013 Mix 2-13 Scentless Apprentice - Demo 2-14 Frances Farmer Will Have Her Revenge On Seattle - Demo / Instrumental 2-15 Dumb - Demo / Instrumental 2-16 Very Ape - Demo / Instrumental 2-17 Pennyroyal Tea - Demo / Instrumental 2-18 Radio Friendly Unit Shifter - Demo / Instrumental 2-19 Tourette's - Demo / Instrumental 2-20 Marigold - Demo 2-21 All Apologies - Demo 2-22 Forgotten Tune - Demo / Instrumental 2-23 Jam - Demo 3-1 Radio Friendly Unit Shifter - Live &amp; Loud 3-2 Drain You - Live &amp; Loud 3-3 Breed - Live &amp; Loud 3-4 Serve The Servants - Live &amp; Loud 3-5 Rape Me - Live &amp; Loud 3-6 Sliver - Live &amp; Loud 3-7 Pennyroyal Tea - Live &amp; Loud 3-8 Scentless Apprentice - Live &amp; Loud 3-9 All Apologies - Live &amp; Loud 3-10 Heart Shaped Box - Live &amp; Loud 3-11 Blew - Live &amp; Loud 3-12 The Man Who Sold The World - Live &amp; Loud 3-13 School - Live &amp; Loud 3-14 Come As You Are - Live &amp; Loud 3-15 Lithium - Live &amp; Loud 3-16 About A Girl - Live &amp; Loud 3-17 Endless, Nameless - Live &amp; Loud <p>In Utero (Deluxe Edition)  _(1993-09-21)</p> Disc - Track Title 1-1 Serve The Servants 1-2 Scentless Apprentice 1-3 Heart-Shaped Box 1-4 Rape Me 1-5 Frances Farmer Will Have Her Revenge On Seattle 1-6 Dumb 1-7 Very Ape 1-8 Milk It 1-9 Pennyroyal Tea 1-10 Radio Friendly Unit Shifter 1-11 Tourette's 1-12 All Apologies 1-13 Gallons Of Rubbing Alcohol Flow Through The Strip 1-14 Marigold 1-15 Moist Vagina - 2013 Mix 1-16 Sappy - 2013 Mix 1-17 I Hate Myself And Want To Die - 2013 Mix 1-18 Pennyroyal Tea - Scott Litt Mix 1-19 Heart Shaped Box - Original Steve Albini 1993 Mix 1-20 All Apologies - Original Steve Albini 1993 Mix 2-1 Serve The Servants - 2013 Mix 2-2 Scentless Apprentice - 2013 Mix 2-3 Heart Shaped Box - 2013 Mix 2-4 Rape Me - 2013 Mix 2-5 Frances Farmer Will Have Her Revenge On Seattle - 2013 Mix 2-6 Dumb - 2013 Mix 2-7 Very Ape - 2013 Mix 2-8 Milk It - 2013 Mix 2-9 Pennyroyal Tea - 2013 Mix 2-10 Radio Friendly Unit Shifter - 2013 Mix 2-11 Tourette's - 2013 Mix 2-12 All Apologies - 2013 Mix 2-13 Scentless Apprentice - Demo 2-14 Frances Farmer Will Have Her Revenge On Seattle - Demo / Instrumental 2-15 Dumb - Demo / Instrumental 2-16 Very Ape - Demo / Instrumental 2-17 Pennyroyal Tea - Demo / Instrumental 2-18 Radio Friendly Unit Shifter - Demo / Instrumental 2-19 Tourette's - Demo / Instrumental 2-20 Marigold - Demo 2-21 All Apologies - Demo 2-22 Forgotten Tune - Demo / Instrumental 2-23 Jam - Demo <p>In Utero  _(1993-09-21)</p> Disc - Track Title 1-1 Serve The Servants 1-2 Scentless Apprentice 1-3 Heart-Shaped Box 1-4 Rape Me 1-5 Frances Farmer Will Have Her Revenge On Seattle 1-6 Dumb 1-7 Very Ape 1-8 Milk It 1-9 Pennyroyal Tea 1-10 Radio Friendly Unit Shifter 1-11 Tourette's 1-12 All Apologies <p>MTV Unplugged In New York (25th Anniversary)  _(1994-11-01)</p> Disc - Track Title 1-1 About A Girl - Live 1-2 Come As You Are - Live 1-3 Jesus Doesn't Want Me For A Sunbeam - Live 1-4 The Man Who Sold The World - Live 1-5 Pennyroyal Tea - Live 1-6 Dumb - Live 1-7 Polly - Live 1-8 On A Plain - Live 1-9 Something In The Way - Live 1-10 Plateau - Live 1-11 Oh Me - Live 1-12 Lake Of Fire - Live 1-13 All Apologies - Live 1-14 Where Did You Sleep Last Night - Live 1-15 Come As You Are - Rehearsal 1-16 Polly - Rehearsal 1-17 Plateau - Rehearsal 1-18 Pennyroyal Tea - Rehearsal 1-19 The Man Who Sold The World - Rehearsal <p>MTV Unplugged In New York  _(1994-11-01)</p> Disc - Track Title 1-1 About A Girl - Live 1-2 Come As You Are - Live 1-3 Jesus Doesn't Want Me For A Sunbeam - Live 1-4 The Man Who Sold The World - Live 1-5 Pennyroyal Tea - Live 1-6 Dumb - Live 1-7 Polly - Live 1-8 On A Plain - Live 1-9 Something In The Way - Live 1-10 Plateau - Live 1-11 Oh Me - Live 1-12 Lake Of Fire - Live 1-13 All Apologies - Live 1-14 Where Did You Sleep Last Night - Live <p>From The Muddy Banks Of The Wishkah (Live)  _(1996-10-01)</p> Disc - Track Title 1-1 Intro - Live At London Astoria, UK, December 3, 1989 1-2 School - Live In Amsterdam, Netherlands/1991 1-3 Drain You - Live At Del Mar Fairgrounds, CA., December 28, 1991 1-4 Aneurysm - Live In Del Mar, California/1991 1-5 Smells Like Teen Spirit - Live In Del Mar, California/1991 1-6 Been A Son - Live In Amsterdam, Netherlands/1991 1-7 Lithium - Live In Amsterdam, Netherlands/1991 1-8 Sliver - Live In Springfield, MA., November 10, 1993 1-9 Spank Thru - Live In Rome, Italy, November 19, 1991 1-10 Scentless Apprentice - Live In Seattle, WA., December 13, 1993 1-11 Heart-Shaped Box - Live In Los Angeles, CA, December 30, 1993 1-12 Milk It - Live In Seattle, WA., January 5, 1994 1-13 Negative Creep - Live In Seattle, WA., October 31, 1991 1-14 Polly - Live At London Astoria, UK, December 3, 1989 1-15 Breed - Live At London Astoria, UK, December 3, 1989 1-16 Tourette's - Live At Reading Festival, UK, August 30, 1992 1-17 Blew - Live In Amsterdam, Netherlands/1991 <p>Nirvana  _(2002-10-29)</p> Disc - Track Title 1-1 You Know You're Right 1-2 About A Girl 1-3 Been A Son - Blew EP Version 1-4 Sliver 1-5 Smells Like Teen Spirit 1-6 Come As You Are 1-7 Lithium 1-8 In Bloom 1-9 Heart-Shaped Box 1-10 Pennyroyal Tea - Single Mix 1-11 Rape Me 1-12 Dumb 1-13 All Apologies - Live 1-14 The Man Who Sold The World - Live <p>With The Lights Out - Box Set  _(2004-11-23)</p> Disc - Track Title 1-1 Heartbreaker - Live 1-2 Anorexorcist - Live 1-3 White Lace And Strange - Live 1-4 Help Me, I'm Hungry - Live 1-5 Mrs. Butterworth - 1988 Rehearsal 1-6 If You Must - Demo 1-7 Pen Cap Chew - Demo 1-8 Downer - Live 1-9 Floyd The Barber - Live 1-10 Raunchola/Moby Dick - Live 1-11 Beans - Solo Acoustic 1-12 Don't Want It All - Solo Acoustic 1-13 Clean Up Before She Comes - Solo Acoustic 1-14 Polly - Solo Acoustic Demo 1-15 About A Girl - Home Demo 1-16 Blandest - Demo 1-17 Dive - Demo 1-18 They Hung Him On A Cross - Demo 1-19 Grey Goose - Instrumental Demo 1-20 Ain't It A Shame - Demo 1-21 Token Eastern Song - Demo 1-22 Even In His Youth - Demo 1-23 Polly - Demo 2-1 Opinion - Live Solo Acoustic 2-2 Lithium - Live Solo Acoustic 2-3 Been A Son - Live Solo Acoustic 2-4 Sliver - Solo Acoustic Demo 2-5 Where Did You Sleep Last Night - Solo Acoustic Demo 2-6 Pay To Play - Demo 2-7 Here She Comes Now - Demo 2-8 Drain You - Demo 2-9 Aneurysm 2-10 Smells Like Teen Spirit - Rehearsal Demo 2-11 Breed - Rough Mix 2-12 Verse Chorus Verse - Outtake 2-13 Old Age - Nevermind Outtake 2-14 Endless, Nameless - 1991 Radio Appearance 2-15 Dumb - 1991 Radio Appearance 2-16 D-7 - 1990 Radio Appearance 2-17 Oh The Guilt 2-18 Curmudgeon 2-19 Return Of The Rat - Outtake 2-20 Smells Like Teen Spirit - Butch Vig Mix 3-1 Rape Me - Solo Acoustic 3-2 Rape Me - Demo 3-3 Scentless Apprentice - Rehearsal Demo 3-4 Heart Shaped Box - Demo 3-5 I Hate Myself And Want To Die - Demo 3-6 Milk It - Demo 3-7 Moist Vagina - Demo 3-8 Gallons Of Rubbing Alcohol Flow Through The Strip 3-9 The Other Improv - Demo 3-10 Serve The Servants - Solo Acoustic 3-11 Very Ape - Solo Acoustic 3-12 Pennyroyal Tea - Solo Acoustic 3-13 Marigold 3-14 Sappy 3-15 Jesus Doesn't Want Me For A Sunbeam - Rehearsal Demo 3-16 Do Re Mi - Home Demo 3-17 You Know You're Right - Home Demo 3-18 All Apologies - Home Demo <p>Sliver - The Best Of The Box  _(2005-01-01)</p> Disc - Track Title 1-1 Spank Thru - 1985 Fecal Matter Demo 1-2 Heartbreaker - Live 1-3 Mrs. Butterworth - 1988 Rehearsal 1-4 Floyd The Barber - Live 1-5 Clean Up Before She Comes - Solo Acoustic 1-6 About A Girl - Home Demo 1-7 Blandest - Demo 1-8 Ain't It A Shame - Demo 1-9 Sappy - 1990 Studio Demo 1-10 Opinion - Live Solo Acoustic 1-11 Lithium - Live Solo Acoustic 1-12 Sliver - Solo Acoustic Demo 1-13 Smells Like Teen Spirit - Rehearsal Demo 1-14 Come As You Are - Boom Box Version 1-15 Old Age - Nevermind Outtake 1-16 Oh The Guilt 1-17 Rape Me - Solo Acoustic 1-18 Rape Me - Demo 1-19 Heart Shaped Box - Demo 1-20 Do Re Mi - Home Demo 1-21 You Know You're Right - Home Demo 1-22 All Apologies - Home Demo <p>Live at Reading  _(2009-01-01)</p> Disc - Track Title 1-1 Breed - 1992/Live at Reading 1-2 Drain You - 1992/Live at Reading 1-3 Aneurysm - 1992/Live at Reading 1-4 School - 1992/Live at Reading 1-5 Sliver - 1992/Live at Reading 1-6 In Bloom - 1992/Live at Reading 1-7 Come As You Are - 1992/Live at Reading 1-8 Lithium - 1992/Live at Reading 1-9 About A Girl - 1992/Live at Reading 1-10 Tourette's - 1992/Live at Reading 1-11 Polly - 1992/Live at Reading 1-12 Lounge Act - 1992/Live at Reading 1-13 Smells Like Teen Spirit - 1992/Live at Reading 1-14 On A Plain - 1992/Live at Reading 1-15 Negative Creep - 1992/Live at Reading 1-16 Been A Son - 1992/Live at Reading 1-17 All Apologies - 1992/Live at Reading 1-18 Blew - 1992/Live at Reading 1-19 Dumb - 1992/Live at Reading 1-20 Stay Away - 1992/Live at Reading 1-21 Spank Thru - 1992/Live at Reading 1-22 The Money Will Roll Right In - 1992/Live at Reading 1-23 D-7 - 1992/Live at Reading 1-24 Territorial Pissings - 1992/Live at Reading <p>Live At The Paramount  _(2019-04-12)</p> Disc - Track Title 1-1 Jesus Doesn't Want Me For A Sunbeam - Live At The Paramount/1991 1-2 Aneurysm - Live At The Paramount/1991 1-3 Drain You - Live At The Paramount/1991 1-4 School - Live At The Paramount/1991 1-5 Floyd The Barber - Live At The Paramount/1991 1-6 Smells Like Teen Spirit - Live At The Paramount/1991 1-7 About A Girl - Live At The Paramount/1991 1-8 Polly - Live At The Paramount/1991 1-9 Breed - Live At The Paramount/1991 1-10 Sliver - Live At The Paramount/1991 1-11 Love Buzz - Live At The Paramount/1991 1-12 Lithium - Live At The Paramount/1991 1-13 Been A Son - Live At The Paramount/1991 1-14 Negative Creep - Live At The Paramount/1991 1-15 On A Plain - Live At The Paramount/1991 1-16 Blew - Live At The Paramount/1991 1-17 Rape Me - Live At The Paramount/1991 1-18 Territorial Pissings - Live At The Paramount/1991 1-19 Endless, Nameless - Live At The Paramount/1991 <p>Live And Loud  _(2019-07-26)</p> Disc - Track Title 1-1 Radio Friendly Unit Shifter - Live &amp; Loud 1-2 Drain You - Live &amp; Loud 1-3 Breed - Live &amp; Loud 1-4 Serve The Servants - Live &amp; Loud 1-5 Rape Me - Live &amp; Loud 1-6 Sliver - Live &amp; Loud 1-7 Pennyroyal Tea - Live &amp; Loud 1-8 Scentless Apprentice - Live &amp; Loud 1-9 All Apologies - Live &amp; Loud 1-10 Heart Shaped Box - Live &amp; Loud 1-11 Blew - Live &amp; Loud 1-12 The Man Who Sold The World - Live &amp; Loud 1-13 School - Live &amp; Loud 1-14 Come As You Are - Live &amp; Loud 1-15 Lithium - Live &amp; Loud 1-16 About A Girl - Live &amp; Loud 1-17 Endless, Nameless - Live &amp; Loud <p>Breed (Live In Amsterdam, Netherlands/1991)  _(2021-09-23)</p> Disc - Track Title 1-1 Breed - Live In Amsterdam, Netherlands/1991 <p>Lithium / Breed (Live)  _(2021-10-08)</p> Disc - Track Title 1-1 Lithium - Live In Melbourne, Australia For Triple J/1992 1-2 Breed - Live In Amsterdam, Netherlands/1991 <p>On A Plain / Lithium / Breed (Live)  _(2021-10-22)</p> Disc - Track Title 1-1 On A Plain - Live In Tokyo, Japan/1992 1-2 Lithium - Live In Melbourne, Australia For Triple J/1992 1-3 Breed - Live In Amsterdam, Netherlands/1991 <p>In Bloom / On A Plain / Lithium / Breed  _(2021-11-05)</p> Disc - Track Title 1-1 In Bloom - Remastered 2021 1-2 On A Plain - Live In Tokyo, Japan/1992 1-3 Lithium - Live In Melbourne, Australia For Triple J/1992 1-4 Breed - Live In Amsterdam, Netherlands/1991 <p>Smells Like Teen Spirit / In Bloom / On A Plain / Lithium / Breed  _(2021-11-10)</p> Disc - Track Title 1-1 Smells Like Teen Spirit - Remastered 2021 1-2 In Bloom - Remastered 2021 1-3 On A Plain - Live In Tokyo, Japan/1992 1-4 Lithium - Live In Melbourne, Australia For Triple J/1992 1-5 Breed - Live In Amsterdam, Netherlands/1991 <p>Nevermind (30th Anniversary Super Deluxe)  _(2021-11-12)</p> Disc - Track Title 1-1 Smells Like Teen Spirit - Remastered 2021 1-2 In Bloom - Remastered 2021 1-3 Come As You Are - Remastered 2021 1-4 Breed - Remastered 2021 1-5 Lithium - Remastered 2021 1-6 Polly - Remastered 2021 1-7 Territorial Pissings - Remastered 2021 1-8 Drain You - Remastered 2021 1-9 Lounge Act - Remastered 2021 1-10 Stay Away - Remastered 2021 1-11 On A Plain - Remastered 2021 1-12 Something In The Way - Remastered 2021 1-13 Endless, Nameless - Remastered 2021 2-1 Drain You - Live In Amsterdam, Netherlands/1991 2-2 Aneurysm - Live In Amsterdam, Netherlands/1991 2-3 School - Live In Amsterdam, Netherlands/1991 2-4 Floyd The Barber - Live In Amsterdam, Netherlands/1991 2-5 Smells Like Teen Spirit - Live In Amsterdam, Netherlands/1991 2-6 About A Girl - Live In Amsterdam, Netherlands/1991 2-7 Polly - Live In Amsterdam, Netherlands/1991 2-8 Lithium - Live In Amsterdam, Netherlands/1991 2-9 Sliver - Live In Amsterdam, Netherlands/1991 2-10 Breed - Live In Amsterdam, Netherlands/1991 2-11 Come As You Are - Live In Amsterdam, Netherlands/1991 2-12 Been A Son - Live In Amsterdam, Netherlands/1991 2-13 Negative Creep - Live In Amsterdam, Netherlands/1991 2-14 On A Plain - Live In Amsterdam, Netherlands/1991 2-15 Blew - Live In Amsterdam, Netherlands/1991 2-16 Love Buzz - Live In Amsterdam, Netherlands/1991 2-17 Territorial Pissings - Live In Amsterdam, Netherlands/1991 3-1 Drain You - Live In Del Mar, California/1991 3-2 Aneurysm - Live In Del Mar, California/1991 3-3 School - Live In Del Mar, California/1991 3-4 Floyd The Barber - Live In Del Mar, California/1991 3-5 Smells Like Teen Spirit - Live In Del Mar, California/1991 3-6 About A Girl - Live In Del Mar, California/1991 3-7 Polly - Live In Del Mar, California/1991 3-8 Sliver - Live In Del Mar, California/1991 3-9 Breed - Live In Del Mar, California/1991 3-10 Come As You Are - Live In Del Mar, California/1991 3-11 Lithium - Live In Del Mar, California/1991 3-12 Territorial Pissings - Live In Del Mar, California/1991 4-1 Aneurysm - Live In Melbourne, Australia For Triple J/1992 4-2 Drain You - Live In Melbourne, Australia For Triple J/1992 4-3 School - Live In Melbourne, Australia For Triple J/1992 4-4 Sliver - Live In Melbourne, Australia For Triple J/1992 4-5 About A Girl - Live In Melbourne, Australia For Triple J/1992 4-6 Come As You Are - Live In Melbourne, Australia For Triple J/1992 4-7 Lithium - Live In Melbourne, Australia For Triple J/1992 4-8 Breed - Live In Melbourne, Australia For Triple J/1992 4-9 Polly - Live In Melbourne, Australia For Triple J/1992 4-10 Lounge Act - Live In Melbourne, Australia For Triple J/1992 4-11 In Bloom - Live In Melbourne, Australia For Triple J/1992 4-12 Love Buzz - Live In Melbourne, Australia For Triple J/1992 4-13 Smells Like Teen Spirit - Live In Melbourne, Australia For Triple J/1992 4-14 Feedback Jam - Live In Melbourne, Australia For Triple J/1992 4-15 Negative Creep - Live In Melbourne, Australia For Triple J/1992 4-16 On A Plain - Live In Melbourne, Australia For Triple J/1992 4-17 Blew - Live In Melbourne, Australia For Triple J/1992 5-1 Negative Creep - Live In Tokyo, Japan/1992 5-2 Been A Son - Live In Tokyo, Japan/1992 5-3 On A Plain - Live In Tokyo, Japan/1992 5-4 Blew - Live In Tokyo, Japan/1992 5-5 Come As You Are - Live In Tokyo, Japan/1992 5-6 Lithium - Live In Tokyo, Japan/1992 5-7 Breed - Live In Tokyo, Japan/1992 5-8 Sliver - Live In Tokyo, Japan/1992 5-9 Drain You - Live In Tokyo, Japan/1992 5-10 About A Girl - Live In Tokyo, Japan/1992 5-11 School - Live In Tokyo, Japan/1992 5-12 Aneurysm - Live In Tokyo, Japan/1992 5-13 Love Buzz - Live In Tokyo, Japan/1992 5-14 Polly - Live In Tokyo, Japan/1992 5-15 Territorial Pissings - Live In Tokyo, Japan/1992 5-16 Smells Like Teen Spirit - Live In Tokyo, Japan/1992 <p>In Utero 30th Live  _(2023-09-29)</p> Disc - Track Title 1-1 Frances Farmer Will Have Her Revenge On Seattle - Live In Seattle, Seattle Center Arena - January 7, 1994 1-2 All Apologies - Live In Los Angeles, Great Western Forum - December 30, 1993 1-3 Pennyroyal Tea - Live In Los Angeles, Great Western Forum - December 30, 1993 1-4 Scentless Apprentice - Live In Seattle, Seattle Center Arena - January 7, 1994 <p>In Utero (30th Anniversary Super Deluxe)  _(2023-10-27)</p> Disc - Track Title 1-1 Serve The Servants - 2023 Remaster 1-2 Scentless Apprentice - 2023 Remaster 1-3 Heart-Shaped Box - 2023 Remaster 1-4 Rape Me - 2023 Remaster 1-5 Frances Farmer Will Have Her Revenge On Seattle - 2023 Remaster 1-6 Dumb - 2023 Remaster 1-7 Very Ape - 2023 Remaster 1-8 Milk It - 2023 Remaster 1-9 Pennyroyal Tea - 2023 Remaster 1-10 Radio Friendly Unit Shifter - 2023 Remaster 1-11 tourette's - 2023 Remaster 1-12 All Apologies - 2023 Remaster 1-13 Gallons Of Rubbing Alcohol Flow Through The Strip - 2023 Remaster 1-14 Marigold - 2023 Remaster 1-15 Sappy - 2023 Remaster 1-16 Moist Vagina - 2023 Remaster 1-17 I Hate Myself And Want To Die - 2023 Remaster 2-1 Radio Friendly Unit Shifter - Live In Los Angeles, Great Western Forum - December 30, 1993 2-2 Drain You - Live In Los Angeles, Great Western Forum - December 30, 1993 2-3 Breed - Live In Los Angeles, Great Western Forum - December 30, 1993 2-4 Serve The Servants - Live In Los Angeles, Great Western Forum - December 30, 1993 2-5 Come As You Are - Live In Los Angeles, Great Western Forum - December 30, 1993 2-6 Smells Like Teen Spirit - Live In Los Angeles, Great Western Forum - December 30, 1993 2-7 Sliver - Live In Los Angeles, Great Western Forum - December 30, 1993 2-8 Dumb - Live In Los Angeles, Great Western Forum - December 30, 1993 2-9 In Bloom - Live In Los Angeles, Great Western Forum - December 30, 1993 2-10 About A Girl - Live In Los Angeles, Great Western Forum - December 30, 1993 2-11 Lithium - Live In Los Angeles, Great Western Forum - December 30, 1993 2-12 Pennyroyal Tea - Live In Los Angeles, Great Western Forum - December 30, 1993 2-13 School - Live In Los Angeles, Great Western Forum - December 30, 1993 2-14 Polly - Live In Los Angeles, Great Western Forum - December 30, 1993 2-15 Frances Farmer Will Have Her Revenge On Seattle - Live In Los Angeles, Great Western Forum - December 30, 1993 2-16 Rape Me - Live In Los Angeles, Great Western Forum - December 30, 1993 2-17 Territorial Pissings - Live In Los Angeles, Great Western Forum - December 30, 1993 2-18 Jesus Doesn't Want Me For A Sunbeam - Live In Los Angeles, Great Western Forum - December 30, 1993 2-19 The Man Who Sold The World - Live In Los Angeles, Great Western Forum - December 30, 1993 2-20 All Apologies - Live In Los Angeles, Great Western Forum - December 30, 1993 2-21 On A Plain - Live In Los Angeles, Great Western Forum - December 30, 1993 2-22 Heart-Shaped Box - Live In Los Angeles, Great Western Forum - December 30, 1993 2-23 Blew - Live In Los Angeles, Great Western Forum - December 30, 1993 2-24 Feedback Jam - Live In Los Angeles, Great Western Forum - December 30, 1993 3-1 Radio Friendly Unit Shifter - Live In Seattle, Seattle Center Arena - January 7, 1994 3-2 Drain You - Live In Seattle, Seattle Center Arena - January 7, 1994 3-3 Breed - Live In Seattle, Seattle Center Arena - January 7, 1994 3-4 Serve The Servants - Live In Seattle, Seattle Center Arena - January 7, 1994 3-5 Come As You Are - Live In Seattle, Seattle Center Arena - January 7, 1994 3-6 Smells Like Teen Spirit - Live In Seattle, Seattle Center Arena - January 7, 1994 3-7 Sliver - Live In Seattle, Seattle Center Arena - January 7, 1994 3-8 Dumb - Live In Seattle, Seattle Center Arena - January 7, 1994 3-9 In Bloom - Live In Seattle, Seattle Center Arena - January 7, 1994 3-10 About A Girl - Live In Seattle, Seattle Center Arena - January 7, 1994 3-11 Lithium - Live In Seattle, Seattle Center Arena - January 7, 1994 3-12 Pennyroyal Tea - Live In Seattle, Seattle Center Arena - January 7, 1994 3-13 School - Live In Seattle, Seattle Center Arena - January 7, 1994 3-14 Polly - Live In Seattle, Seattle Center Arena - January 7, 1994 3-15 Frances Farmer Will Have Her Revenge On Seattle - Live In Seattle, Seattle Center Arena - January 7, 1994 3-16 Milk It - Live In Seattle, Seattle Center Arena - January 7, 1994 3-17 Rape Me - Live In Seattle, Seattle Center Arena - January 7, 1994 3-18 Territorial Pissings - Live In Seattle, Seattle Center Arena - January 7, 1994 3-19 Jesus Doesn't Want Me For A Sunbeam - Live In Seattle, Seattle Center Arena - January 7, 1994 3-20 The Man Who Sold The World - Live In Seattle, Seattle Center Arena - January 7, 1994 3-21 All Apologies - Live In Seattle, Seattle Center Arena - January 7, 1994 3-22 On A Plain - Live In Seattle, Seattle Center Arena - January 7, 1994 3-23 Scentless Apprentice - Live In Seattle, Seattle Center Arena - January 7, 1994 3-24 Heart-Shaped Box - Live In Seattle, Seattle Center Arena - January 7, 1994 3-25 Blew - Live In Seattle, Seattle Center Arena - January 7, 1994 3-26 Serve The Servants - Live In Rome, Palaghiaccio Di Marino - February 22, 1994 3-27 Scentless Apprentice - Live In Rome, Palaghiaccio Di Marino - February 22, 1994 3-28 Heart-Shaped Box - Live In Rome, Palaghiaccio Di Marino - February 22, 1994 3-29 Very Ape - Live In Rome, Palaghiaccio Di Marino - February 22, 1994 3-30 Milk It - Live In Springfield, Springfield Civic Center - November 10, 1993 3-31 tourette's - Live In New York, Roseland Ballroom - July 23, 1993"},{"location":"9status/","title":"Spotify Api Implementation status","text":""},{"location":"9status/#albums","title":"Albums","text":"<ul> <li> Get Album \u2b95 GET <code>/albums/{id}</code></li> <li> Get Several Albums \u2b95 GET <code>/albums?ids={ids}</code></li> <li> Get Album Tracks \u2b95 GET <code>/albums/{id}/tracks</code></li> <li> Get User's Saved Albums \u2b95 GET <code>/me/albums</code> \ud83d\udd12</li> <li> Save Albums for Current User \u2b95 PUT <code>/me/albums</code> \ud83d\udd12</li> <li> Remove Users' Saved Albums \u2b95 DELETE <code>/me/albums</code> \ud83d\udd12</li> <li> Check User's Saved Albums \u2b95 GET <code>/me/albums/contains?ids={ids}</code> \ud83d\udd12</li> <li> Get New Releases \u2b95 GET <code>/browse/new-releases</code></li> </ul>"},{"location":"9status/#artists","title":"Artists","text":"<ul> <li> Get Artist \u2b95 GET <code>/artists/{id}</code></li> <li> Get Several Artists \u2b95 GET <code>/artists?ids={ids}</code></li> <li> Get Artist's Albums \u2b95 GET <code>/artists/{id}/albums</code></li> <li> Get Artist's Top Tracks \u2b95 GET <code>/artists/{id}/top-tracks</code></li> <li> Get Artist's Related Artists \u2b95 GET <code>/artists/{id}/related-artists</code></li> </ul>"},{"location":"9status/#audiobooks","title":"Audiobooks","text":"<p>Since audiobooks are not available in my country, I won't implement this part of the API</p>"},{"location":"9status/#categories","title":"Categories","text":"<ul> <li> Get Single Browse Category \u2b95 GET <code>/browse/categories/{category_id}</code></li> <li> Get Several Browse Categories \u2b95 GET <code>/browse/categories</code></li> </ul>"},{"location":"9status/#chapters","title":"Chapters","text":"<p>Since audiobooks are not available in my country, I won't implement this part of the API</p>"},{"location":"9status/#episodes","title":"Episodes","text":"<ul> <li> Get Episode \u2b95 GET <code>/episodes/{id}</code> \ud83d\udd12</li> <li> Get Several Episodes \u2b95 GET <code>/episodes</code> \ud83d\udd12</li> <li> Get User's Saved Episodes \u2b95 GET <code>/me/episodes</code> \ud83d\udd12</li> <li> Save Episodes for Current User \u2b95 PUT <code>/me/episodes</code> \ud83d\udd12</li> <li> Remove User's Saved Episodes \u2b95 DELETE <code>/me/episodes</code> \ud83d\udd12</li> <li> Check User's Saved Episodes \u2b95 GET <code>/me/episodes/contains</code> \ud83d\udd12</li> </ul>"},{"location":"9status/#genres","title":"Genres","text":"<ul> <li> Get Available Genre Seeds \u2b95 GET <code>/recommendations/available-genre-seeds</code></li> </ul>"},{"location":"9status/#markets","title":"Markets","text":"<ul> <li> Get Available Markets \u2b95 GET <code>/markets</code></li> </ul>"},{"location":"9status/#player","title":"Player","text":"<ul> <li> Get Playback State \u2b95 GET <code>/me/player</code> \ud83d\udd12</li> <li> Transfer Playback \u2b95 PUT <code>/me/player</code> \ud83d\udd12</li> <li> Get Available Devices \u2b95 GET <code>/me/player/devices</code> \ud83d\udd12</li> <li> Get Currently Playing Track \u2b95 GET <code>/me/player/currently-playing</code> \ud83d\udd12</li> <li> Start/Resume Playback \u2b95 PUT <code>/me/player/play</code> \ud83d\udd12</li> <li> Pause Playback \u2b95 PUT <code>/me/player/pause</code> \ud83d\udd12</li> <li> Skip To Next \u2b95 POST <code>/me/player/next</code> \ud83d\udd12</li> <li> Skip To Previous \u2b95 POST <code>/me/player/previous</code> \ud83d\udd12</li> <li> Seek To Position \u2b95 GET <code>/me/player/seek</code> \ud83d\udd12</li> <li> Set Repeat Mode \u2b95 PUT <code>/me/player/repeat</code> \ud83d\udd12</li> <li> Set Playback Volume \u2b95 PUT <code>/me/player/volume</code> \ud83d\udd12</li> <li> Toggle Playback Shuffle \u2b95 PUT <code>/me/player/shuffle</code> \ud83d\udd12</li> <li> Get Recently Played Tracks \u2b95 GET <code>/me/player/recently-played</code> \ud83d\udd12</li> <li> Get the User's Queue \u2b95 GET <code>/me/player/queue</code> \ud83d\udd12</li> <li> Add Item to Playback Queue \u2b95 POST <code>/me/player/queue</code> \ud83d\udd12</li> </ul>"},{"location":"9status/#playlists","title":"Playlists","text":"<ul> <li> Get Playlist \u2b95 GET <code>/playlists/{playlist_id}</code></li> <li> Change Playlist Details \u2b95 PUT <code>/playlists/{playlist_id}</code> \ud83d\udd12</li> <li> Get Playlist Items \u2b95 GET <code>/playlists/{playlist_id}/tracks</code> \ud83d\udd12</li> <li> Update Playlist Items \u2b95 PUT <code>/playlists/{playlist_id}/tracks</code> \ud83d\udd12</li> <li> Add Items to Playlist \u2b95 POST <code>/playlists/{playlist_id}/tracks</code> \ud83d\udd12</li> <li> Remove Playlist Items \u2b95 DELETE <code>/playlists/{playlist_id}/tracks</code> \ud83d\udd12</li> <li> Get Current User's Playlists \u2b95 GET <code>/me/playlists</code> \ud83d\udd12</li> <li> Get User's Playlists \u2b95 GET <code>/users/{user_id}/playlists</code> \ud83d\udd12</li> <li> Create Playlist \u2b95 POST <code>/users/{user_id}/playlists</code> \ud83d\udd12</li> <li> Get Featured Playlists \u2b95 GET <code>/browse/featured-playlists</code></li> <li> Get Category's Playlists \u2b95 GET <code>/browse/categories/{category_id}/playlists</code></li> <li> Get Playlist Cover Image \u2b95 GET <code>/playlists/{playlist_id}/images</code></li> <li> Add Custom Playlist Cover Image \u2b95 PUT <code>/playlists/{playlist_id}/images</code> \ud83d\udd12</li> </ul>"},{"location":"9status/#search","title":"Search","text":"<ul> <li> Search for Item \u2b95 GET <code>/search</code></li> </ul>"},{"location":"9status/#shows","title":"Shows","text":"<ul> <li> Get Show \u2b95 GET <code>/shows/{id}</code> \ud83d\udd12 (partial, resume_point not implemented)</li> <li> Get Several Shows \u2b95 GET <code>/shows</code></li> <li> Get Show Episodes \u2b95 GET <code>/shows/{id}/episodes</code> \ud83d\udd12  (partial, resume_point not implemented)</li> <li> Get User's Saved Shows \u2b95 GET <code>/me/shows</code> \ud83d\udd12</li> <li> Save Shows for Current User \u2b95 PUT <code>/me/shows</code> \ud83d\udd12</li> <li> Remove User's Saved Shows \u2b95 DELETE <code>/me/shows</code> \ud83d\udd12</li> <li> Check User's Saved Shows \u2b95 GET <code>/me/shows/contains</code> \ud83d\udd12</li> </ul>"},{"location":"9status/#tracks","title":"Tracks","text":"<ul> <li> Get Track \u2b95 GET <code>/tracks/{id}</code></li> <li> Get Several Tracks \u2b95 GET <code>/tracks?ids={ids}</code></li> <li> Get User's Saved Tracks \u2b95 GET <code>/me/tracks</code> \ud83d\udd12</li> <li> Save Tracks for Current User \u2b95 PUT <code>/me/tracks?ids={ids}</code> \ud83d\udd12</li> <li> Remove User's Saved Tracks \u2b95 DELETE <code>/me/tracks?ids={ids}</code> \ud83d\udd12</li> <li> Check User's Saved Tracks \u2b95 GET <code>/me/tracks/contains?ids={ids}</code> \ud83d\udd12</li> <li> Get Track's Audio Features \u2b95 GET <code>/audio-features/{id}</code></li> <li> Get Several Tracks' Audio Features \u2b95 GET <code>/audio-features?ids={ids}</code></li> <li> Get Track's Audio Analysis \u2b95 GET <code>/audio-analysis/{id}</code></li> <li> Get Recommendations \u2b95 GET <code>/recommendations</code></li> </ul>"},{"location":"9status/#users","title":"Users","text":"<ul> <li> Get Current User's Profile \u2b95 GET <code>/me</code> \ud83d\udd12</li> <li> Get User's Top Items \u2b95 GET <code>/me/top/{type}</code> \ud83d\udd12</li> <li> Get User's Profile \u2b95 GET <code>/users/{user_id}</code></li> <li> Follow Playlist \u2b95 GET <code>/playlists/{playlist_id}/followers</code> \ud83d\udd12</li> <li> Unfollow Playlist \u2b95 DELETE <code>/playlists/{playlist_id}/followers</code> \ud83d\udd12</li> <li> Get Followed Artists \u2b95 GET <code>/me/following</code> \ud83d\udd12</li> <li> Follow Artists or Users \u2b95 PUT <code>/me/following</code> \ud83d\udd12</li> <li> Unfollow Artists or Users \u2b95 DELETE <code>/me/following</code> \ud83d\udd12</li> <li> Check If User Follows Artists or Users \u2b95 GET <code>/me/following/contains</code> \ud83d\udd12</li> <li> Check if Users Follow Playlist \u2b95 GET <code>/playlists/{playlist_id}/followers/contains</code></li> </ul>"}]}